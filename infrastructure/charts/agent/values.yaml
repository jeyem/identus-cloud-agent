nameOverride: ""
fullnameOverride: ""
ingress:
  enabled: true
  applicationUrls:
  - chart-base-stack.atalaprism.io
  platformIngressUrl: chart-base-platform-ingress.atalaprism.io
  cors:
    enabled: false
    allow_origins: ""
  auth:
    enable: true
    consumer_restriction: true
    consumers: []
    # External Consumers are ones where the secret keys/API tokens
    # are pulled in using External Secrets [and therefore aren't generated by helm]
    externalConsumers: []
    externalConsumerKeyPrefix: chart-base-key-prefix

secrets:
  secretStore: chart-base-secretstore
  dockerRegistryToken: chart-base-docker-registry-token

server:
  image:
      repository: ghcr.io
      pullPolicy: IfNotPresent
      tag: hyperledger/identus-cloud-agent
  resources:
    limits:
      cpu: 500m
      memory: 1024Mi
    requests:
      cpu: 250m
      memory: 512Mi
  livenessProbe:
    httpGet:
      path: /_system/health
      port: 8085
    failureThreshold: 1
    periodSeconds: 10
  startupProbe:
    httpGet:
      path: /_system/health
      port: 8085
    failureThreshold: 30
    periodSeconds: 10
  # Additional environment variables to be added to the server container
  additionalEnvVariables: {}
  useVault: true
  keycloak:
    enabled: false
    realm: prism-agent
    bootstrap: true
    admin:
      username: atala
      password:
        secretKeyRef:
          name: keycloak-admin-secret
          key: password
    client:
      clientId: prism-agent
      clientSecret:
        secretKeyRef:
          name: agent-keycloak-client-secret
          key: secret

database:
  postgres:
    managingTeam: atala
    databaseSize: 4Gi
    numberOfInstances: 2
    resources:
      requests:
        cpu: 100m
        memory: 256Mi
      limits:
        cpu: 700m
        memory: 1024Mi

vdrManager:
  host: chart-base-node-service
  port: 50053

vault:
  injector:
    enabled: false
  server:
    standalone:
      config: |
        ui = true

        listener "tcp" {
          tls_disable = 1
          address = "[::]:8200"
          cluster_address = "[::]:8201"
          # Enable unauthenticated metrics access (necessary for Prometheus Operator)
          #telemetry {
          #  unauthenticated_metrics_access = "true"
          #}
        }
        storage "file" {
          path = "/vault/data"
        }

        # Example configuration for using auto-unseal, using Google Cloud KMS. The
        # GKMS keys must already exist, and the cluster must have a service account
        # that is authorized to access GCP KMS.
        #seal "gcpckms" {
        #   project     = "vault-helm-dev"
        #   region      = "global"
        #   key_ring    = "vault-helm-unseal-kr"
        #   crypto_key  = "vault-helm-unseal-key"
        #}

        # Example configuration for enabling Prometheus metrics in your config.
        #telemetry {
        #  prometheus_retention_time = "30s"
        #  disable_hostname = true
        #}
        secrets {
          enable = true
        }

        path "secret/*" {
          backend = "kv"
          version = 2
        }

keycloak:
  enabled: false
  # --hostname-url should be the frontend url that user will be logging in with keycloak
  extraStartupArgs: "--hostname-url=http://localhost:8080 --import-realm --features=declarative-user-profile"
  tls:
    enabled: true
    autoGenerated: true
  # this section controls the admin username/password for getting on keycloak
  auth:
    existingSecret: keycloak-admin-secret
    passwordSecretKey: password
    adminUser: atala
  postgresql:
    enabled: false
  externalDatabase:
    existingSecret: "keycloak-admin.atala-keycloak-postgres-cluster.credentials.postgresql.acid.zalan.do"
    existingSecretPasswordKey: password
    host: "atala-keycloak-postgres-cluster.{{.Release.Namespace}}"
    port: "5432"
    user: keycloak-admin
    database: keycloak
  extraVolumes:
  - name: cloud-agent-realm-import-volume
    configMap:
      name: cloud-agent-realm-import
      items:
        - key: cloud-agent.json
          path: cloud-agent.json
  extraVolumeMounts:
  - name: cloud-agent-realm-import-volume
    mountPath: /opt/bitnami/keycloak/data/import
    readOnly: true

# It is configured for deployment and postgresql objects of cloud-agent
affinity:
  nodeAffinity: {}
#    requiredDuringSchedulingIgnoredDuringExecution:
#      nodeSelectorTerms:
#        - matchExpressions:
#            - key: "type"
#              operator: In
#              values:
#                - "performance"

tolerations: []
#  - key: "type"
#    operator: "Equal"
#    value: "performance"
#    effect: "NoSchedule"


